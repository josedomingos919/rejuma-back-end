generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phone      String   @unique
  password   String
  access     String
  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id])
  statusId   Int?
  status     Status?  @relation(fields: [statusId], references: [id])

  @@map("users")
}

model Country {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  code     String     @unique
  Province Province[]
}

model Province {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  countryId Int
  country   Country    @relation(fields: [countryId], references: [id])
  Employee  Employee[]
}

model Office {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  code     String     @unique
  Employee Employee[]
}

model Employee {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String
  bi         String    @unique
  birthDay   DateTime?
  civilState String?
  gender     String?
  address    String?
  salaryType String
  salary     Decimal
  email      String?
  users      User[]
  phone1     String
  phone2     String?
  statusId   Int
  status     Status    @relation(fields: [statusId], references: [id])
  officeId   Int
  office     Office    @relation(fields: [officeId], references: [id])
  provinceId Int
  province   Province  @relation(fields: [provinceId], references: [id])

  @@map("employees")
}

model Classroom {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @unique
  description String?
}

model Status {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  code        String     @unique
  description String?
  User        User[]
  Employee    Employee[]

  @@map("status")
}

model Class {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name             String
  ClassDisciplines ClassDisciplines[]
}

model ClassDisciplines {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  disciplineId Int
  discipline   Discipline @relation(fields: [disciplineId], references: [id])

  classId Int
  class   Class @relation(fields: [classId], references: [id])
}

model Discipline {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name             String             @unique
  description      String?
  ClassDisciplines ClassDisciplines[]
}
