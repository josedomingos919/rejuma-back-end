generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phone      String   @unique
  password   String
  access     String
  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id])
  statusId   Int?
  status     Status?  @relation(fields: [statusId], references: [id])

  @@map("users")
}

model Country {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  code     String     @unique
  province Province[]
  employee Employee[]
  student  Student[]

  @@map("country")
}

model Province {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  countryId Int
  country   Country    @relation(fields: [countryId], references: [id])
  employee  Employee[]
  student   Student[]

  @@map("province")
}

model Office {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  code     String     @unique
  employee Employee[]

  @@map("office")
}

model Student {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  bi           String         @unique
  birthDay     DateTime?
  civilState   String?
  gender       String?
  address      String?
  email        String?
  phone1       String
  phone2       String?
  countryId    Int
  country      Country        @relation(fields: [countryId], references: [id])
  statusId     Int
  status       Status         @relation(fields: [statusId], references: [id])
  provinceId   Int
  province     Province       @relation(fields: [provinceId], references: [id])
  registration Registration[]

  @@map("student")
}

model Employee {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String
  bi         String    @unique
  birthDay   DateTime?
  civilState String?
  gender     String?
  address    String?
  salaryType String
  salary     Decimal
  email      String?
  users      User[]
  phone1     String
  phone2     String?
  countryId  Int
  country    Country   @relation(fields: [countryId], references: [id])
  statusId   Int
  status     Status    @relation(fields: [statusId], references: [id])
  officeId   Int
  office     Office    @relation(fields: [officeId], references: [id])
  provinceId Int
  province   Province  @relation(fields: [provinceId], references: [id])
  teacher    Teacher[]

  @@map("employees")
}

model Classroom {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String      @unique
  description   String?
  ClassTeam     ClassTeam[]
  studentNumber Int?

  @@map("classroom")
}

model Status {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  code         String         @unique
  description  String?
  user         User[]
  show         Boolean        @default(true)
  employee     Employee[]
  teacher      Teacher[]
  student      Student[]
  ClassTeam    ClassTeam[]
  Registration Registration[]

  @@map("status")
}

model Class {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name              String              @unique
  classDisciplines  ClassDisciplines[]
  registrationPrice RegistrationPrice[]
  classTeam         ClassTeam[]
  registration      Registration[]

  @@map("class")
}

model ClassDisciplines {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  disciplineId Int
  discipline   Discipline @relation(fields: [disciplineId], references: [id])

  classId Int
  class   Class @relation(fields: [classId], references: [id])

  @@map("classdisciplines")
}

model Discipline {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name                 String                 @unique
  description          String?
  classDisciplines     ClassDisciplines[]
  courseDisciplines    CourseDisciplines[]
  teacherDisciplines   TeacherDisciplines[]
  classTeamDisciplines ClassTeamDisciplines[]
  classTeamTeacher     ClassTeamTeacher[]

  @@map("discipline")
}

model Course {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name              String              @unique
  description       String?
  courseDisciplines CourseDisciplines[]
  registrationPrice RegistrationPrice[]
  classTeam         ClassTeam[]
  registration      Registration[]

  @@map("course")
}

model CourseDisciplines {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId Int
  course   Course @relation(fields: [courseId], references: [id])

  disciplineId Int
  discipline   Discipline @relation(fields: [disciplineId], references: [id])

  @@map("coursedisciplines")
}

model SchoolYear {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  year         Int            @unique
  description  String
  classTeam    ClassTeam[]
  registration Registration[]

  @@map("schoolyear")
}

model Teacher {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId         Int                  @unique
  employee           Employee             @relation(fields: [employeeId], references: [id])
  teacherDisciplines TeacherDisciplines[]
  academicLevel      String

  statusId         Int?
  status           Status?            @relation(fields: [statusId], references: [id])
  ClassTeamTeacher ClassTeamTeacher[]

  @@map("teachers")
}

model TeacherDisciplines {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacherId    Int
  teacher      Teacher    @relation(fields: [teacherId], references: [id])
  disciplineId Int
  discipline   Discipline @relation(fields: [disciplineId], references: [id])

  @@map("teacherdisciplines")
}

model RegistrationPrice {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  registrationPrice   Decimal
  reregistrationPrice Decimal
  monthPrice          Decimal

  courseId Int?
  course   Course? @relation(fields: [courseId], references: [id])
  classId  Int
  class    Class   @relation(fields: [classId], references: [id])

  @@unique([classId, courseId])
  @@map("registrationprice")
}

model ClassTeam {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  period String

  schoolYearId Int
  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id])

  courseId Int?
  course   Course? @relation(fields: [courseId], references: [id])

  classId Int
  class   Class @relation(fields: [classId], references: [id])

  classroomId          Int
  classroom            Classroom              @relation(fields: [classroomId], references: [id])
  classTeamDisciplines ClassTeamDisciplines[]
  classTeamTeacher     ClassTeamTeacher[]

  statusId     Int?
  status       Status?        @relation(fields: [statusId], references: [id])
  Registration Registration[]

  @@unique([classroomId, period])
  @@unique([name, schoolYearId, classId])
  @@map("classteam")
}

model ClassTeamTeacher {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacherId Int
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  disciplineId Int
  discipline   Discipline @relation(fields: [disciplineId], references: [id])

  classTeamId Int
  classTeam   ClassTeam @relation(fields: [classTeamId], references: [id])

  @@unique([teacherId, disciplineId, classTeamId])
  @@map("classteamteacher")
}

model ClassTeamDisciplines {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classTeamId Int
  classTeam   ClassTeam @relation(fields: [classTeamId], references: [id])

  disciplineId Int
  discipline   Discipline @relation(fields: [disciplineId], references: [id])

  @@map("classteamdisciplines")
}

model Registration {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type  String
  price Decimal

  classTeamId Int
  classTeam   ClassTeam @relation(fields: [classTeamId], references: [id])

  courseId Int?
  course   Course? @relation(fields: [courseId], references: [id])

  classId Int
  class   Class @relation(fields: [classId], references: [id])

  SchoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id])
  schoolYearId Int

  statusId Int
  status   Status @relation(fields: [statusId], references: [id])

  student   Student @relation(fields: [studentId], references: [id])
  studentId Int

  @@unique([studentId, classTeamId])
}
