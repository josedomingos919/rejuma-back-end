generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phone      String   @unique
  password   String
  access     String
  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id])
  statusId   Int?
  status     Status?  @relation(fields: [statusId], references: [id])

  @@map("users")
}

model Country {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  code     String     @unique
  province Province[]
  employee Employee[]
  student  Student[]

  @@map("country")
}

model Province {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  countryId Int
  country   Country    @relation(fields: [countryId], references: [id])
  employee  Employee[]
  student   Student[]

  @@map("province")
}

model Office {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  code     String     @unique
  employee Employee[]

  @@map("office")
}

model Student {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  bi           String?
  birthDay     DateTime?
  civilState   String?
  gender       String?
  address      String?
  email        String?
  phone1       String
  phone2       String?
  countryId    Int
  country      Country        @relation(fields: [countryId], references: [id])
  statusId     Int
  status       Status         @relation(fields: [statusId], references: [id])
  provinceId   Int
  province     Province       @relation(fields: [provinceId], references: [id])
  registration Registration[]

  parentAffiliation   String?
  maternalAffiliation String?
  residence           String?
  municipality        String?
  natural             String?
  emitOn              String?
  validUntil          String?
  isWorking           String?
  work                String?
  workStation         String?
  sponsorOfEducation  String?

  balance Float @default(0)

  @@map("student")
}

model Employee {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  bi           String         @unique
  birthDay     DateTime?
  civilState   String?
  gender       String?
  address      String?
  salaryType   String
  salary       Float
  email        String?
  users        User[]
  phone1       String
  phone2       String?
  countryId    Int
  country      Country        @relation(fields: [countryId], references: [id])
  statusId     Int
  status       Status         @relation(fields: [statusId], references: [id])
  officeId     Int
  office       Office         @relation(fields: [officeId], references: [id])
  provinceId   Int
  province     Province       @relation(fields: [provinceId], references: [id])
  teacher      Teacher[]
  Registration Registration[]
  payment      Payment[]
  Invoice      Invoice[]

  @@map("employees")
}

model Classroom {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String      @unique
  description   String?
  ClassTeam     ClassTeam[]
  studentNumber Int?

  @@map("classroom")
}

model Status {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  code         String         @unique
  description  String?
  user         User[]
  show         Boolean        @default(true)
  employee     Employee[]
  teacher      Teacher[]
  student      Student[]
  ClassTeam    ClassTeam[]
  Registration Registration[]
  payment      Payment[]
  Invoice      Invoice[]

  @@map("status")
}

model Class {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name              String              @unique
  registrationPrice RegistrationPrice[]
  classTeam         ClassTeam[]
  registration      Registration[]
  CurriculumGrid    CurriculumGrid[]

  @@map("class")
}

model Discipline {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name               String               @unique
  description        String?
  teacherDisciplines TeacherDisciplines[]
  classTeamTeacher   ClassTeamTeacher[]
  CurriculumGrid     CurriculumGrid[]
  Exam               Exam[]
  SchoolResource     SchoolResource[]

  @@map("discipline")
}

model Course {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @unique
  description String?

  registrationPrice RegistrationPrice[]
  classTeam         ClassTeam[]
  registration      Registration[]
  CurriculumGrid    CurriculumGrid[]

  @@map("course")
}

model SchoolYear {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  year         Int            @unique
  description  String
  classTeam    ClassTeam[]
  registration Registration[]

  @@map("schoolyear")
}

model Teacher {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId         Int                  @unique
  employee           Employee             @relation(fields: [employeeId], references: [id])
  teacherDisciplines TeacherDisciplines[]
  academicLevel      String

  statusId         Int?
  status           Status?            @relation(fields: [statusId], references: [id])
  ClassTeamTeacher ClassTeamTeacher[]

  @@map("teachers")
}

model TeacherDisciplines {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacherId    Int
  teacher      Teacher    @relation(fields: [teacherId], references: [id])
  disciplineId Int
  discipline   Discipline @relation(fields: [disciplineId], references: [id])

  @@map("teacherdisciplines")
}

model RegistrationPrice {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  registrationPrice   Float?
  reregistrationPrice Float?
  monthPrice          Float?
  examePrice          Float?
  registrationMulta   Float?

  courseId Int?
  course   Course? @relation(fields: [courseId], references: [id])
  classId  Int
  class    Class   @relation(fields: [classId], references: [id])

  @@unique([classId, courseId])
  @@map("registrationprice")
}

model ClassTeam {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  period String

  schoolYearId Int
  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id])

  courseId Int?
  course   Course? @relation(fields: [courseId], references: [id])

  classId Int
  class   Class @relation(fields: [classId], references: [id])

  classroomId      Int
  classroom        Classroom          @relation(fields: [classroomId], references: [id])
  classTeamTeacher ClassTeamTeacher[]

  statusId     Int?
  status       Status?        @relation(fields: [statusId], references: [id])
  Registration Registration[]

  @@unique([name, schoolYearId, classId])
  @@map("classteam")
}

model ClassTeamTeacher {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacherId Int
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  disciplineId Int
  discipline   Discipline @relation(fields: [disciplineId], references: [id])

  classTeamId Int
  classTeam   ClassTeam @relation(fields: [classTeamId], references: [id])

  @@unique([teacherId, disciplineId, classTeamId])
  @@map("classteamteacher")
}

model Registration {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type      String
  price     Float
  cardPrice Float

  classTeamId Int
  classTeam   ClassTeam @relation(fields: [classTeamId], references: [id])

  courseId Int?
  course   Course? @relation(fields: [courseId], references: [id])

  classId Int
  class   Class @relation(fields: [classId], references: [id])

  SchoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id])
  schoolYearId Int

  statusId Int
  status   Status @relation(fields: [statusId], references: [id])

  employeeId Int?
  employee   Employee? @relation(fields: [employeeId], references: [id])

  student     Student       @relation(fields: [studentId], references: [id])
  studentId   Int
  productSale ProductSale[]
  payment     Payment[]
  Invoice     Invoice[]

  @@map("registration")
}

model Product {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String
  price       Float?
  code        String        @unique
  quantity    Int           @default(0)
  useQuantity String        @default("Sim")
  ProductSale ProductSale[]

  @@map("product")
}

model ProductSale {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  registrationId Int?
  registration   Registration? @relation(fields: [registrationId], references: [id])
  product        Product?      @relation(fields: [productId], references: [id])
  productId      Int?
  quantity       Int           @default(1)
  price          Int?

  @@map("productSale")
}

model CurriculumGrid {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class   Class @relation(fields: [classId], references: [id])
  classId Int

  course   Course? @relation(fields: [courseId], references: [id])
  courseId Int?

  discipline   Discipline @relation(fields: [disciplineId], references: [id])
  disciplineId Int

  @@map("curriculumGrid")
}

model Months {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String
  number     Int
  SchoolFees SchoolFees[]

  @@map("months")
}

model Payment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type           String
  value          Float
  multa          Float
  total          Float
  employee       Employee         @relation(fields: [employeeId], references: [id])
  status         Status           @relation(fields: [statusId], references: [id])
  registration   Registration     @relation(fields: [registrationId], references: [id])
  employeeId     Int
  statusId       Int
  registrationId Int
  SchoolFees     SchoolFees[]
  Exam           Exam[]
  SchoolResource SchoolResource[]

  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId Int

  @@map("payment")
}

model SchoolFees {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payment   Payment @relation(fields: [paymentId], references: [id])
  paymentId Int

  month    Months @relation(fields: [monthsId], references: [id])
  monthsId Int

  schoolFine String

  @@map("schoolFees")
}

model Exam {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payment   Payment @relation(fields: [paymentId], references: [id])
  paymentId Int

  discipline   Discipline @relation(fields: [disciplineId], references: [id])
  disciplineId Int

  @@map("exam")
}

model SchoolResource {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payment   Payment @relation(fields: [paymentId], references: [id])
  paymentId Int

  discipline   Discipline @relation(fields: [disciplineId], references: [id])
  disciplineId Int

  @@map("schoolResource")
}

model Setting {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  key       String @unique()
  descricao String
  value     String

  @@map("setting")
}

model Invoice {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  number         String?
  registration   Registration @relation(fields: [registrationId], references: [id])
  registrationId Int
  subTotal       Float
  descontoSaldo  Float
  total          Float
  valorDado      Float
  troco          Float

  status   Status @relation(fields: [statusId], references: [id])
  statusId Int

  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int

  Payment Payment[]

  @@map("invoice")
}
